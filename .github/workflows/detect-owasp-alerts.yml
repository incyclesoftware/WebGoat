name: "Detect and Annotate OWASP Alerts"

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  schedule:
    - cron: "0 0 * * *"  # Run daily

jobs:
  detect-owasp:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch code scanning alerts
        id: fetch_alerts
        uses: actions/github-script@v6
        with:
          script: |
            const alerts = await github.request('GET /repos/{owner}/{repo}/code-scanning/alerts', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100  // Fetch up to 100 alerts per page
            });
            
            let owaspRelatedAlerts = alerts.data.filter(alert =>
              alert.rule.description.toLowerCase().includes("injection") ||
              alert.rule.description.toLowerCase().includes("broken authentication") ||
              alert.rule.description.toLowerCase().includes("data exposure") ||
              alert.rule.description.toLowerCase().includes("xxe") ||
              alert.rule.description.toLowerCase().includes("access control") ||
              alert.rule.description.toLowerCase().includes("misconfiguration") ||
              alert.rule.description.toLowerCase().includes("xss") ||
              alert.rule.description.toLowerCase().includes("insecure deserialization") ||
              alert.rule.description.toLowerCase().includes("vulnerable components") ||
              alert.rule.description.toLowerCase().includes("logging")
            );

            if (owaspRelatedAlerts.length === 0) {
              console.log("No OWASP-related alerts found.");
            } else {
              console.log(`${owaspRelatedAlerts.length} OWASP-related alerts found.`);
              owaspRelatedAlerts.forEach(alert => {
                console.log(`Alert: ${alert.rule.description} (Severity: ${alert.rule.security_severity_level})`);
              });
            }

            return owaspRelatedAlerts;
